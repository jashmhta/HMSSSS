input {
  # Backend application logs
  file {
    path => "/var/log/backend/*.log"
    start_position => "beginning"
    type => "backend"
    codec => "json"
  }

  # Nginx access logs
  file {
    path => "/var/log/nginx/access.log"
    start_position => "beginning"
    type => "nginx"
  }

  # PostgreSQL logs
  file {
    path => "/var/log/postgresql/*.log"
    start_position => "beginning"
    type => "postgresql"
  }

  # Redis logs
  file {
    path => "/var/log/redis/*.log"
    start_position => "beginning"
    type => "redis"
  }

  # System logs
  syslog {
    port => 514
    type => "system"
  }
}

filter {
  # Parse nginx access logs
  if [type] == "nginx" {
    grok {
      match => { "message" => '%{IPORHOST:clientip} - %{DATA:ident} \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response} %{NUMBER:bytes} "%{DATA:referrer}" "%{DATA:agent}" "%{DATA:x_forwarded_for}" rt=%{NUMBER:request_time} uct="%{DATA:upstream_connect_time}" uht="%{DATA:upstream_header_time}" urt="%{DATA:upstream_response_time}"' }
    }
    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
      target => "@timestamp"
    }
    geoip {
      source => "clientip"
    }
  }

  # Parse backend JSON logs
  if [type] == "backend" {
    json {
      source => "message"
    }
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
  }

  # Add common fields
  mutate {
    add_field => {
      "service" => "%{type}"
      "environment" => "production"
    }
  }

  # Parse log levels
  grok {
    match => { "message" => "%{LOGLEVEL:level}" }
  }

  # Filter out health check logs
  if [request] =~ /\/health/ {
    drop {}
  }
}

output {
  # Send all logs to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "hms-%{+YYYY.MM.dd}"
    document_type => "%{type}"
  }

  # Send error logs to separate index
  if [level] == "error" or [level] == "ERROR" {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "hms-errors-%{+YYYY.MM.dd}"
      document_type => "error"
    }
  }

  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}