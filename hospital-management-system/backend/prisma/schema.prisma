// Hospital Management System Database Schema
// Prisma schema for PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // For migrations
}

// Read replicas configuration
// Note: Prisma doesn't directly support read replicas in schema, but we can configure in connection string
// Use DATABASE_URL with multiple hosts for load balancing

// Core User Management
model User {
  id                String      @id @default(cuid())
  tenantId          String      // Multi-tenancy: Hospital ID
  email             String      @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  role              UserRole    @default(PATIENT)
  isActive          Boolean     @default(true)
  lastLogin         DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // MFA (Multi-Factor Authentication)
  mfaEnabled        Boolean     @default(false)
  mfaSecret         String?     // TOTP secret
  mfaBackupCodes    String[]    // Backup recovery codes
  mfaMethod         MFAMethod?  @default(TOTP)

  // Security
  failedLoginAttempts Int        @default(0)
  lockedUntil         DateTime?
  passwordChangedAt   DateTime?
  lastPasswordReset   DateTime?

  // Archiving
  isArchived        Boolean     @default(false)
  archivedAt        DateTime?

   // Relations
    patient            Patient?
    doctor             Doctor?
    nurse              Nurse?
    receptionist       Receptionist?
    labTechnician      LabTechnician?
    pharmacist         Pharmacist?
     admin              Admin?
     notifications      Notification[]
     auditLogs          AuditLog[]

    // Audit
    createdBy          String?
    updatedBy          String?

  @@map("users")

  // Indexes for performance
  @@index([tenantId])
  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([lastLogin])
  @@index([failedLoginAttempts])
  @@index([lockedUntil])
  @@index([isArchived])
  @@index([tenantId, role]) // Composite for tenant-specific queries
  @@index([tenantId, isArchived]) // For archiving queries
}

enum MFAMethod {
  TOTP      // Time-based One-Time Password (Google Authenticator, etc.)
  SMS       // SMS-based OTP
  EMAIL     // Email-based OTP
}

enum UserRole {
  SUPERADMIN
  ADMIN
  DOCTOR
  NURSE
  RECEPTIONIST
  LAB_TECHNICIAN
  PHARMACIST
  PATIENT
}

// Patient Management
model Patient {
  id                String   @id @default(cuid())
  tenantId          String   // Multi-tenancy
  userId            String   @unique
  mrn               String   @unique // Medical Record Number
  dateOfBirth       DateTime
  gender            Gender
  bloodType         BloodType?
  emergencyContact  String?
  emergencyPhone    String?
  address           Json?    // Structured address
  insuranceInfo     Json?    // Insurance details
  medicalHistory    Json?    // Medical history summary
  allergies         String[]
  currentMedications String[]
  isArchived        Boolean  @default(false) // For archiving
  archivedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

     // Relations
     user              User     @relation(fields: [userId], references: [id])
     appointments      Appointment[]
     medicalRecords    MedicalRecord[]
     prescriptions     Prescription[]
     bills             Bill[]
      labTests          LabTest[]
      radiologyTests    RadiologyTest[]
      emergencyVisits   EmergencyVisit[]
      opdVisits         OPDVisit[]
      surgeries         Surgery[]
      invoices          Invoice[]
      fhirResources     FHIRResource[]
      hl7Messages       HL7Message[]
      dicomStudies      DICOMStudy[]
      interactionChecks InteractionCheck[]
      ipdAdmissions     IPDAdmission[]

  @@map("patients")

  // Indexes for performance
  @@index([tenantId])
  @@index([mrn])
  @@index([userId])
  @@index([dateOfBirth])
  @@index([gender])
  @@index([bloodType])
  @@index([createdAt])
  @@index([isArchived])
  @@index([tenantId, mrn]) // Composite
  @@index([tenantId, createdAt]) // For partitioning
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum BloodType {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
}

// Doctor Management
model Doctor {
  id                String   @id @default(cuid())
  tenantId          String   // Multi-tenancy
  userId            String   @unique
  licenseNumber     String   @unique
  specialization    String
  department        String
  experienceYears   Int      @default(0)
  qualifications    String[]
  schedule          Json?    // Weekly schedule
  isAvailable       Boolean  @default(true)
  isArchived        Boolean  @default(false)
  archivedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id])
  appointments      Appointment[]
  medicalRecords    MedicalRecord[]
  prescriptions     Prescription[]
  surgeries         Surgery[]
  radiologyTests    RadiologyTest[]

  @@map("doctors")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

// Appointment Management
model Appointment {
  id                String            @id @default(cuid())
  tenantId          String            // Multi-tenancy
  patientId         String
  doctorId          String
  appointmentDate   DateTime
  duration          Int               @default(30) // minutes
  type              AppointmentType
  status            AppointmentStatus @default(SCHEDULED)
  reason            String?
  notes             String?
  roomNumber        String?
  isArchived        Boolean           @default(false)
  archivedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  patient           Patient           @relation(fields: [patientId], references: [id])
  doctor            Doctor            @relation(fields: [doctorId], references: [id])

  @@unique([doctorId, appointmentDate])
  @@map("appointments")

  // Indexes for performance
  @@index([tenantId])
  @@index([patientId])
  @@index([doctorId])
  @@index([appointmentDate])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([isArchived])
  @@index([tenantId, appointmentDate]) // Partition key
}

enum AppointmentType {
  CONSULTATION
  FOLLOW_UP
  EMERGENCY
  PROCEDURE
  CHECKUP
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Medical Records
model MedicalRecord {
  id                String   @id @default(cuid())
  tenantId          String   // Multi-tenancy
  patientId         String
  doctorId          String
  visitDate         DateTime
  chiefComplaint    String
  historyOfPresentIllness String?
  physicalExamination Json?   // Structured exam findings
  diagnosis         String[]
  treatmentPlan     String?
  medications       Json?    // Prescribed medications
  followUpDate      DateTime?
  notes             String?
  isArchived        Boolean  @default(false)
  archivedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  patient           Patient  @relation(fields: [patientId], references: [id])
  doctor            Doctor   @relation(fields: [doctorId], references: [id])

  @@map("medical_records")

  // Indexes
  @@index([tenantId])
  @@index([patientId])
  @@index([doctorId])
  @@index([visitDate])
  @@index([isArchived])
  @@index([tenantId, visitDate]) // Partition key
  @@index([tenantId, patientId, visitDate]) // Composite for patient history
}

// Pharmacy Management
model Medication {
  id                String         @id @default(cuid())
  name              String
  genericName       String?
  brandName         String?
  dosageForm        DosageForm
  strength          String
  manufacturer      String?
  batchNumber       String?
  expiryDate        DateTime?
  stockQuantity     Int            @default(0)
  reorderLevel      Int            @default(10)
  unitPrice         Decimal        @db.Decimal(10,2)
  category          String?
  requiresPrescription Boolean      @default(true)
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

   // Relations
   prescriptions     Prescription[]
   inventoryLogs     InventoryLog[]
   drugInteractions1 DrugInteraction[] @relation(name: "drug1")
   drugInteractions2 DrugInteraction[] @relation(name: "drug2")

  @@map("medications")
}

enum DosageForm {
  TABLET
  CAPSULE
  SYRUP
  INJECTION
  CREAM
  DROPS
  INHALER
  PATCH
}

// Prescription Management
model Prescription {
  id                String             @id @default(cuid())
  tenantId          String             // Multi-tenancy
  patientId         String
  doctorId          String
  medicationId      String
  dosage            String
  frequency         String
  duration          Int                // days
  quantity          Int
  instructions      String?
  status            PrescriptionStatus @default(ACTIVE)
  prescribedDate    DateTime          @default(now())
  dispensedDate     DateTime?
  dispensedBy       String?
  isArchived        Boolean           @default(false)
  archivedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

   // Relations
   patient           Patient            @relation(fields: [patientId], references: [id])
   doctor            Doctor             @relation(fields: [doctorId], references: [id])
   medication        Medication         @relation(fields: [medicationId], references: [id])
   interactionChecks InteractionCheck[]

  @@map("prescriptions")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

// Laboratory Management
model LabTestCatalog {
  id                String         @id @default(cuid())
  tenantId          String         // Multi-tenancy
  testCode          String         @unique
  testName          String
  category          String
  subcategory       String?
  department        LabDepartment
  specimenType      SpecimenType
  containerType     String
  volumeRequired    String?        // e.g., "5ml", "10ml"
  specialInstructions String?
  turnaroundTime    Int            // hours
  referenceRange    Json?          // Age/sex specific ranges
  units             String?
  method            String?
  cost              Decimal        @db.Decimal(10,2)
  isActive          Boolean        @default(true)
  requiresApproval  Boolean        @default(false)
  isArchived        Boolean        @default(false)
  archivedAt        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  tests             LabTest[]

  @@map("lab_test_catalog")

  // Indexes
  @@index([tenantId])
  @@index([testCode])
  @@index([category])
  @@index([department])
  @@index([isActive])
  @@index([isArchived])
}

model LabTest {
  id                String         @id @default(cuid())
  tenantId          String         // Multi-tenancy
  patientId         String
  testCatalogId     String
  orderNumber       String         @unique
  status            LabTestStatus  @default(ORDERED)
  priority          LabPriority    @default(ROUTINE)
  orderedDate       DateTime       @default(now())
  orderedBy         String
  clinicalInfo      String?        // Clinical indication
  diagnosis         String?        // Suspected diagnosis
  urgent            Boolean        @default(false)
  isArchived        Boolean        @default(false)
  archivedAt        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  patient           Patient        @relation(fields: [patientId], references: [id])
  testCatalog       LabTestCatalog @relation(fields: [testCatalogId], references: [id])
  samples           LabSample[]
  results           LabResult[]
  reports           LabReport[]

  @@map("lab_tests")

  // Indexes
  @@index([tenantId])
  @@index([patientId])
  @@index([testCatalogId])
  @@index([status])
  @@index([priority])
  @@index([orderedDate])
  @@index([urgent])
  @@index([isArchived])
}

model LabSample {
  id                String         @id @default(cuid())
  labTestId         String
  sampleId          String         @unique // Barcode/sample ID
  specimenType      SpecimenType
  collectionMethod  CollectionMethod
  collectionDate    DateTime       @default(now())
  collectedBy       String
  collectionSite    String?        // e.g., "Left arm", "Right hand"
  volume            String?        // Actual volume collected
  condition         SampleCondition @default(GOOD)
  storageLocation   String?        // Freezer/fridge location
  storageTemp       String?        // e.g., "-80°C", "4°C"
  expiryDate        DateTime?
  notes             String?
  rejected          Boolean        @default(false)
  rejectionReason   String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  labTest           LabTest        @relation(fields: [labTestId], references: [id])
  results           LabResult[]

  @@map("lab_samples")

  // Indexes
  @@index([labTestId])
  @@index([sampleId])
  @@index([specimenType])
  @@index([collectionDate])
  @@index([rejected])
}

model LabResult {
  id                String         @id @default(cuid())
  labTestId         String
  labSampleId       String?
  parameter         String         // Test parameter name
  value             String         // Result value
  units             String?
  referenceRange    String?
  flag              ResultFlag?    // H, L, HH, LL, etc.
  status            ResultStatus   @default(PRELIMINARY)
  performedBy       String
  performedDate     DateTime       @default(now())
  verifiedBy        String?
  verifiedDate      DateTime?
  instrument        String?        // Equipment used
  method            String?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  labTest           LabTest        @relation(fields: [labTestId], references: [id])
  labSample         LabSample?     @relation(fields: [labSampleId], references: [id])

  @@map("lab_results")

  // Indexes
  @@index([labTestId])
  @@index([labSampleId])
  @@index([parameter])
  @@index([status])
  @@index([performedDate])
}

model LabQualityControl {
  id                String         @id @default(cuid())
  testParameter     String
  controlLot        String
  controlLevel      QCLevel
  expectedValue     String
  expectedRange     String
  actualValue       String
  performedBy       String
  performedDate     DateTime       @default(now())
  instrument        String
  status            QCStatus
  notes             String?
  correctiveAction  String?
  createdAt         DateTime       @default(now())

  @@map("lab_quality_control")

  // Indexes
  @@index([testParameter])
  @@index([controlLot])
  @@index([performedDate])
  @@index([status])
}

model LabReagent {
  id                String         @id @default(cuid())
  name              String
  catalogNumber     String?
  manufacturer      String
  lotNumber         String
  expiryDate        DateTime
  receivedDate      DateTime       @default(now())
  quantity          Int
  unit              String         // e.g., "vials", "bottles"
  storageCondition  String?        // e.g., "2-8°C", "-20°C"
  cost              Decimal        @db.Decimal(10,2)
  supplier          String?
  status            ReagentStatus  @default(ACTIVE)
  minStockLevel     Int            @default(1)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("lab_reagents")

  // Indexes
  @@index([name])
  @@index([lotNumber])
  @@index([expiryDate])
  @@index([status])
}

model LabEquipment {
  id                String         @id @default(cuid())
  name              String
  model             String
  serialNumber      String         @unique
  manufacturer      String
  installationDate  DateTime
  warrantyExpiry    DateTime?
  lastCalibration   DateTime?
  nextCalibration   DateTime?
  status            EquipmentStatus @default(ACTIVE)
  location          String
  maintenanceSchedule String?      // e.g., "Monthly", "Quarterly"
  lastMaintenance   DateTime?
  nextMaintenance   DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("lab_equipment")

  // Indexes
  @@index([serialNumber])
  @@index([status])
  @@index([nextCalibration])
  @@index([nextMaintenance])
}

model LabReport {
  id                String         @id @default(cuid())
  labTestId         String
  reportNumber      String         @unique
  reportType        ReportType     @default(FINAL)
  generatedDate     DateTime       @default(now())
  generatedBy       String
  approvedBy        String?
  approvedDate      DateTime?
  filePath          String         // PDF file path
  fileSize          Int?           // bytes
  checksum          String?        // For integrity verification
  status            ReportStatus   @default(GENERATED)
  deliveryMethod    DeliveryMethod?
  deliveredDate     DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  labTest           LabTest        @relation(fields: [labTestId], references: [id])

  @@map("lab_reports")

  // Indexes
  @@index([labTestId])
  @@index([reportNumber])
  @@index([status])
  @@index([generatedDate])
}

model LISIntegration {
  id                String         @id @default(cuid())
  systemName        String
  systemVersion     String?
  endpoint          String
  apiKey            String         // Encrypted
  isActive          Boolean        @default(true)
  lastSync          DateTime?
  syncStatus        SyncStatus     @default(IDLE)
  errorMessage      String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("lis_integrations")

  // Indexes
  @@index([systemName])
  @@index([isActive])
  @@index([lastSync])
}

enum LabTestStatus {
  ORDERED
  SAMPLE_COLLECTED
  RECEIVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REJECTED
}

enum LabDepartment {
  CHEMISTRY
  HEMATOLOGY
  MICROBIOLOGY
  IMMUNOLOGY
  ENDOCRINOLOGY
  TOXICOLOGY
  MOLECULAR
  CYTOLOGY
  HISTOPATHOLOGY
}

enum SpecimenType {
  BLOOD
  URINE
  STOOL
  SPUTUM
  CSF
  SYNOVIAL_FLUID
  PLEURAL_FLUID
  PERITONEAL_FLUID
  SWAB
  TISSUE
  OTHER
}

enum CollectionMethod {
  VENIPUNCTURE
  FINGERSTICK
  HEELSTICK
  URINE_COLLECTION
  STOOL_COLLECTION
  SWAB
  ASPIRATION
  BIOPSY
}

enum SampleCondition {
  GOOD
  HEMOLYZED
  CLOTTED
  INSUFFICIENT
  CONTAMINATED
  LIPIDIC
  ICTERIC
}

enum LabPriority {
  STAT
  URGENT
  ROUTINE
}

enum ResultFlag {
  NORMAL
  HIGH
  LOW
  CRITICAL_HIGH
  CRITICAL_LOW
  ABNORMAL
}

enum ResultStatus {
  PRELIMINARY
  FINAL
  AMENDED
  CORRECTED
}

enum QCLevel {
  LEVEL_1
  LEVEL_2
  LEVEL_3
}

enum QCStatus {
  PASS
  FAIL
  WARNING
  INVALID
}

enum ReagentStatus {
  ACTIVE
  EXPIRED
  DEPLETED
  QUARANTINED
  DISCARDED
}

enum EquipmentStatus {
  ACTIVE
  MAINTENANCE
  CALIBRATION
  OUT_OF_ORDER
  DECOMMISSIONED
}

enum ReportType {
  PRELIMINARY
  FINAL
  AMENDED
  CORRECTED
}

enum ReportStatus {
  GENERATED
  APPROVED
  PRINTED
  DELIVERED
  ARCHIVED
}

enum DeliveryMethod {
  EMAIL
  FAX
  PRINT
  PORTAL
  API
}

enum SyncStatus {
  IDLE
  SYNCING
  SUCCESS
  FAILED
}

// Radiology Management
model RadiologyTest {
  id                String               @id @default(cuid())
  tenantId          String               // Multi-tenancy
  patientId         String
  testName          String
  testCode          String
  modality          RadiologyModality
  status            RadiologyTestStatus  @default(ORDERED)
  orderedDate       DateTime             @default(now())
  orderedBy         String
  scheduledDate     DateTime?
  performedDate     DateTime?
  performedBy       String?
  radiologistId     String?
  reportDate        DateTime?
  findings          String?
  impression        String?
  recommendations   String?
  images            String[]             // File paths/URLs
  urgent            Boolean              @default(false)
  isArchived        Boolean              @default(false)
  archivedAt        DateTime?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt

  // Relations
  patient           Patient              @relation(fields: [patientId], references: [id])
  radiologist       Doctor?              @relation(fields: [radiologistId], references: [id])

  @@map("radiology_tests")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

enum RadiologyModality {
  XRAY
  CT
  MRI
  ULTRASOUND
  MAMMOGRAPHY
  DEXA
}

enum RadiologyTestStatus {
  ORDERED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Billing & Invoicing
model Bill {
  id                String         @id @default(cuid())
  tenantId          String         // Multi-tenancy
  patientId         String
  billNumber        String         @unique
  billDate          DateTime       @default(now())
  dueDate           DateTime
  status            BillStatus     @default(PENDING)
  subtotal          Decimal        @db.Decimal(10,2)
  taxAmount         Decimal        @db.Decimal(10,2) @default(0)
  discountAmount    Decimal        @db.Decimal(10,2) @default(0)
  totalAmount       Decimal        @db.Decimal(10,2)
  paidAmount        Decimal        @db.Decimal(10,2) @default(0)
  balanceAmount     Decimal        @db.Decimal(10,2)
  paymentMethod     PaymentMethod?
  paymentDate       DateTime?
  notes             String?
  isArchived        Boolean        @default(false)
  archivedAt        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  patient           Patient        @relation(fields: [patientId], references: [id])
  items             BillItem[]
  insuranceClaims   InsuranceClaim[]

  @@map("bills")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

enum BillStatus {
  PENDING
  PARTIALLY_PAID
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  CASH
  CARD
  INSURANCE
  UPI
  BANK_TRANSFER
  CHEQUE
}

model BillItem {
  id                String   @id @default(cuid())
  billId            String
  itemType          BillItemType
  itemId            String   // Reference to the actual service/test
  description       String
  quantity          Int      @default(1)
  unitPrice         Decimal  @db.Decimal(10,2)
  totalPrice        Decimal  @db.Decimal(10,2)
  createdAt         DateTime @default(now())

  // Relations
  bill              Bill     @relation(fields: [billId], references: [id])

  @@map("bill_items")
}

enum BillItemType {
  CONSULTATION
  PROCEDURE
  LAB_TEST
  RADIOLOGY_TEST
  MEDICATION
  ROOM_CHARGE
  EMERGENCY
  OTHER
}

// Emergency Department
model EmergencyVisit {
  id                String             @id @default(cuid())
  tenantId          String             // Multi-tenancy
  patientId         String
  visitNumber       String             @unique
  arrivalDate       DateTime           @default(now())
  triageLevel       TriageLevel
  chiefComplaint    String
  vitalSigns        Json?              // BP, HR, Temp, etc.
  assessment        String?
  treatment         String?
  disposition       EmergencyDisposition
  dischargeDate     DateTime?
  notes             String?
  isArchived        Boolean            @default(false)
  archivedAt        DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relations
  patient           Patient            @relation(fields: [patientId], references: [id])
  vitals            EmergencyVital[]
  medications       EmergencyMedication[]
  procedures        EmergencyProcedure[]
  alerts            EmergencyAlert[]

  @@map("emergency_visits")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

enum TriageLevel {
  LEVEL_1 // Resuscitation
  LEVEL_2 // Emergent
  LEVEL_3 // Urgent
  LEVEL_4 // Less Urgent
  LEVEL_5 // Non-Urgent
}

enum EmergencyDisposition {
  DISCHARGED
  ADMITTED
  TRANSFERRED
  LEFT_AGAINST_ADVICE
  EXPIRED
}

// OPD (Outpatient Department) Management
model OPDVisit {
  id                String         @id @default(cuid())
  tenantId          String         // Multi-tenancy
  patientId         String
  doctorId          String
  visitNumber       String         @unique
  visitDate         DateTime       @default(now())
  status            OPDVisitStatus @default(WAITING)
  chiefComplaint    String
  vitals            Json?          // BP, HR, Temp, RR, etc.
  examination       Json?          // Physical examination findings
  diagnosis         String[]
  treatment         String?
  prescriptions     Json?          // Prescribed medications
  followUpDate      DateTime?
  notes             String?
  roomNumber        String?
  priority          PriorityLevel  @default(NORMAL)
  isArchived        Boolean        @default(false)
  archivedAt        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  patient           Patient        @relation(fields: [patientId], references: [id])

  @@map("opd_visits")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

enum OPDVisitStatus {
  WAITING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REFERRED
}

enum PriorityLevel {
  EMERGENCY
  URGENT
  NORMAL
  ROUTINE
}

// Operating Theater (OT) Management
model OperatingTheater {
  id          String   @id @default(cuid())
  tenantId    String   // Multi-tenancy
  name        String   @unique
  location    String
  type        OTType
  capacity    Int      @default(1) // Number of beds/tables
  equipment   String[] // Available equipment
  isActive    Boolean  @default(true)
  isArchived  Boolean  @default(false)
  archivedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  surgeries   Surgery[]

  @@map("operating_theaters")

  // Indexes
  @@index([tenantId])
  @@index([isArchived])
}

model Surgery {
  id                String           @id @default(cuid())
  patientId         String
  surgeonId         String
  otId              String
  surgeryNumber     String           @unique
  procedureName     String
  procedureCode     String?
  scheduledDate     DateTime
  actualStartTime   DateTime?
  actualEndTime     DateTime?
  estimatedDuration Int              // minutes
  actualDuration    Int?             // minutes
  status            SurgeryStatus    @default(SCHEDULED)
  priority          SurgeryPriority  @default(ELECTIVE)
  anesthesiaType    AnesthesiaType?
  assistants         String[]         // Assistant doctors
  nurses            String[]         // OT nurses
  equipment         String[]         // Required equipment
  preOpNotes        Json?            // Pre-operative notes
  intraOpNotes      Json?            // Intra-operative notes
  postOpNotes       Json?            // Post-operative notes
  complications     String?
  outcome           SurgeryOutcome?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  patient           Patient          @relation(fields: [patientId], references: [id])
  surgeon           Doctor           @relation(fields: [surgeonId], references: [id])
  operatingTheater  OperatingTheater @relation(fields: [otId], references: [id])

  @@map("surgeries")
}

enum OTType {
  GENERAL
  CARDIAC
  NEURO
  ORTHOPEDIC
  PEDIATRIC
  GYNECOLOGY
  UROLOGY
  OPHTHALMOLOGY
}

enum SurgeryStatus {
  SCHEDULED
  PREPARING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum SurgeryPriority {
  EMERGENCY
  URGENT
  ELECTIVE
}

enum AnesthesiaType {
  GENERAL
  SPINAL
  EPIDURAL
  LOCAL
  SEDATION
}

enum SurgeryOutcome {
  SUCCESSFUL
  COMPLICATIONS
  UNSUCCESSFUL
  DEATH
}

// Blood Bank Management
model BloodDonation {
  id                String           @id @default(cuid())
  donorId           String
  donationDate      DateTime         @default(now())
  bloodType         BloodType
  quantity          Decimal          @db.Decimal(5,2) // in ml
  donationType      DonationType
  status            DonationStatus   @default(COLLECTED)
  screeningResult   ScreeningResult?
  expiryDate        DateTime
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("blood_donations")
}

enum DonationType {
  WHOLE_BLOOD
  PLATELETS
  PLASMA
  DOUBLE_RED_CELLS
}

enum DonationStatus {
  COLLECTED
  PROCESSED
  QUARANTINED
  RELEASED
  DISCARDED
}

enum ScreeningResult {
  SAFE
  DEFERRED
  REJECTED
}

// Inventory Management
model InventoryLog {
  id                String           @id @default(cuid())
  medicationId      String
  action            InventoryAction
  quantity          Int
  previousStock     Int
  newStock          Int
  reason            String?
  performedBy       String
  batchNumber       String?
  expiryDate        DateTime?
  costPrice         Decimal?         @db.Decimal(10,2)
  createdAt         DateTime         @default(now())

  // Relations
  medication        Medication       @relation(fields: [medicationId], references: [id])

  @@map("inventory_logs")
}

enum InventoryAction {
  RECEIVED
  ISSUED
  ADJUSTED
  EXPIRED
  DAMAGED
}

// Staff Management (simplified)
model Nurse {
  id          String   @id @default(cuid())
  userId      String   @unique
  licenseNumber String @unique
  department  String
  shift       ShiftType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("nurses")
}

model Receptionist {
  id          String   @id @default(cuid())
  userId      String   @unique
  department  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("receptionists")
}

model LabTechnician {
  id          String   @id @default(cuid())
  userId      String   @unique
  licenseNumber String @unique
  specialties String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("lab_technicians")
}

model Pharmacist {
  id          String   @id @default(cuid())
  userId      String   @unique
  licenseNumber String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("pharmacists")
}

model Admin {
  id          String   @id @default(cuid())
  userId      String   @unique
  department  String
  permissions String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("admins")
}

enum ShiftType {
  MORNING
  EVENING
  NIGHT
  ROTATING
}

// Compliance Monitoring
model ComplianceCheck {
  id                String            @id @default(cuid())
  checkId           String            @unique // e.g., "hipaa-encryption", "gdpr-consent"
  name              String
  description       String
  category          ComplianceCategory
  status            ComplianceStatus
  severity          ComplianceSeverity
  details           String
  recommendations   String[]
  lastChecked       DateTime          @default(now())
  nextCheck         DateTime
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("compliance_checks")

  // Indexes for performance
  @@index([checkId])
  @@index([category])
  @@index([status])
  @@index([severity])
  @@index([nextCheck])
}

enum ComplianceCategory {
  HIPAA
  GDPR
  GENERAL
}

enum ComplianceStatus {
  PASS
  FAIL
  WARNING
}

enum ComplianceSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Audit Logging
model AuditLog {
  id                String   @id @default(cuid())
  tenantId          String   // Multi-tenancy
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  action            String   // e.g., "PATIENT_RECORD_ACCESSED", "MEDICAL_RECORD_CREATED"
  resource          String   // e.g., "patients", "medical_records", "prescriptions"
  resourceId        String   // ID of the resource being accessed/modified
  eventType         String?  // e.g., "PRE_AUTH_SUBMITTED", "CLAIM_APPEAL_SUBMITTED"
  timestamp         DateTime @default(now())
  ipAddress         String?
  userAgent         String?
  details           Json?    // Additional context about the action
  complianceFlags   String[] // e.g., ["HIPAA", "PHI_ACCESS", "GDPR"]
  sessionId         String?  // For tracking user sessions
  success           Boolean  @default(true) // Whether the action succeeded
  isArchived        Boolean  @default(false)
  archivedAt        DateTime?

  @@map("audit_logs")

  // Indexes for performance
  @@index([tenantId])
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([complianceFlags])
  @@index([sessionId])
  @@index([isArchived])
  @@index([tenantId, timestamp]) // Partition key
  @@index([tenantId, action, timestamp]) // For compliance reporting
}

// Data Retention Tracking
model DataRetentionLog {
  id                String   @id @default(cuid())
  tableName         String
  recordId          String
  retentionPeriod   Int      // days
  dataCategory      DataCategory
  deletedAt         DateTime @default(now())
  deletionReason    String   // e.g., "RETENTION_POLICY", "USER_REQUEST"
  deletedBy         String   // user ID who performed deletion

  @@map("data_retention_logs")

  // Indexes for performance
  @@index([tableName])
  @@index([recordId])
  @@index([dataCategory])
  @@index([deletedAt])
}

enum DataCategory {
  PATIENT_DATA
  FINANCIAL
  ADMINISTRATIVE
  AUDIT
}

// Accounting Models
model Invoice {
  id                String      @id @default(cuid())
  invoiceNumber     String      @unique
  patientId         String
  amount            Decimal     @db.Decimal(15, 2)
  status            InvoiceStatus @default(PENDING)
  issuedAt          DateTime    @default(now())
  dueDate           DateTime
  paidAt            DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  patient           Patient     @relation(fields: [patientId], references: [id])

  @@map("invoices")
  @@index([patientId])
  @@index([status])
  @@index([issuedAt])
}

model Expense {
  id                String      @id @default(cuid())
  description       String
  amount            Decimal     @db.Decimal(15, 2)
  category          ExpenseCategory
  expenseDate       DateTime    @default(now())
  hospitalId        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("expenses")
  @@index([category])
  @@index([expenseDate])
  @@index([hospitalId])
}

model Asset {
  id                String      @id @default(cuid())
  name              String
  description       String?
  category          AssetCategory
  value             Decimal     @db.Decimal(15, 2)
  purchaseDate      DateTime
  depreciationRate  Float?      // Annual depreciation rate
  currentValue      Decimal     @db.Decimal(15, 2)
  status            AssetStatus @default(ACTIVE)
  hospitalId        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("assets")
  @@index([category])
  @@index([status])
  @@index([hospitalId])
}

model ReferralIncome {
  id                String      @id @default(cuid())
  source            String
  amount            Decimal     @db.Decimal(15, 2)
  referralDate      DateTime    @default(now())
  status            ReferralStatus @default(PENDING)
  hospitalId        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("referral_incomes")
  @@index([source])
  @@index([status])
  @@index([hospitalId])
}

model OutsourcedService {
  id                String      @id @default(cuid())
  serviceName       String
  provider          String
  cost              Decimal     @db.Decimal(15, 2)
  serviceDate       DateTime    @default(now())
  hospitalId        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("outsourced_services")
  @@index([provider])
  @@index([serviceDate])
  @@index([hospitalId])
}

model FixedCost {
  id                String      @id @default(cuid())
  description       String
  amount            Decimal     @db.Decimal(15, 2)
  frequency         CostFrequency @default(MONTHLY)
  startDate         DateTime    @default(now())
  endDate           DateTime?
  hospitalId        String?
  isActive          Boolean     @default(true)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("fixed_costs")
  @@index([frequency])
  @@index([hospitalId])
  @@index([isActive])
}

model VariableCost {
  id                String      @id @default(cuid())
  description       String
  unitCost          Decimal     @db.Decimal(15, 2)
  category          VariableCostCategory
  hospitalId        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("variable_costs")
  @@index([category])
  @@index([hospitalId])
}

// Hospital Management
model Hospital {
  id                String      @id @default(cuid())
  name              String
  address           Json?
  phone             String?
  email             String?
  status            HospitalStatus @default(ACTIVE)
  licenseNumber     String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@map("hospitals")
  @@index([status])
  @@index([name])
}

// Insurance Claim Model
model InsuranceClaim {
  id                String              @id @default(cuid())
  billId            String
  invoiceId         String?
  insuranceProvider String
  claimNumber       String              @unique
  claimAmount       Decimal             @db.Decimal(10,2)
  approvedAmount    Decimal             @db.Decimal(10,2) @default(0)
  claimStatus       InsuranceClaimStatus @default(PENDING)
  claimDate         DateTime            @default(now())
  processedBy       String
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  bill              Bill?               @relation(fields: [billId], references: [id])

  @@map("insurance_claims")
  @@index([billId])
  @@index([claimStatus])
  @@index([claimDate])
}

// Notification Model
model Notification {
  id                String      @id @default(cuid())
  tenantId          String      // Multi-tenancy
  userId            String
  title             String
  message           String
  type              NotificationType
  metadata          Json?
  isRead            Boolean     @default(false)
  readAt            DateTime?
  isArchived        Boolean     @default(false)
  archivedAt        DateTime?
  createdAt         DateTime    @default(now())

  // Relations
  user              User        @relation(fields: [userId], references: [id])

  @@map("notifications")
  @@index([tenantId])
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@index([isArchived])
}



// Enums for Accounting
enum InvoiceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum ExpenseCategory {
  SALARIES
  UTILITIES
  SUPPLIES
  MAINTENANCE
  EQUIPMENT
  INSURANCE
  OTHER
}

enum AssetCategory {
  EQUIPMENT
  BUILDING
  VEHICLE
  FURNITURE
  TECHNOLOGY
  OTHER
}

enum AssetStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  DISPOSED
}

enum ReferralStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum CostFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum VariableCostCategory {
  MEDICAL_SUPPLIES
  LABORATORY
  PHARMACY
  LAUNDRY
  CATERING
  OTHER
}

enum HospitalStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}

enum InsuranceClaimStatus {
  PENDING
  APPROVED
  DENIED
  PARTIALLY_APPROVED
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
  APPOINTMENT
  BILLING
  SECURITY
}

// Price Estimator Management
model ServicePricing {
  id                String           @id @default(cuid())
  serviceType       ServiceType      // CONSULTATION, LAB_TEST, RADIOLOGY, SURGERY, ROOM, PROCEDURE
  serviceName       String
  serviceCode       String?          @unique
  description       String?
  basePrice         Decimal          @db.Decimal(10,2)
  currency          String           @default("USD")
  isActive          Boolean          @default(true)
  category          String?
  subcategory       String?
  duration          Int?             // Duration in minutes for time-based services
  requirements      Json?            // Special requirements or pre-conditions
  insuranceCoverage Json?            // Insurance coverage details
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("service_pricing")
}

model Medicine {
  id                String           @id @default(cuid())
  name              String
  genericName       String?
  brandName         String?
  dosageForm        String
  strength          String
  manufacturer      String?
  batchNumber       String?
  expiryDate        DateTime?
  stockQuantity     Int              @default(0)
  reorderLevel      Int              @default(10)
  unitPrice         Decimal          @db.Decimal(10,2)
  category          String?
  requiresPrescription Boolean        @default(true)
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("medicines")
}

model ServicePackage {
  id                String           @id @default(cuid())
  name              String
  description       String?
  packageCode       String?          @unique
  basePrice         Decimal          @db.Decimal(10,2)
  currency          String           @default("USD")
  isActive          Boolean          @default(true)
  category          String?
  duration          Int?             // Validity period in days
  services          Json             // Array of service IDs with quantities
  inclusions        Json?            // What's included in the package
  exclusions        Json?            // What's excluded from the package
  terms             Json?            // Terms and conditions
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@map("service_packages")
}



enum ServiceType {
  CONSULTATION
  LAB_TEST
  RADIOLOGY
  SURGERY
  ROOM
  PROCEDURE
  MEDICATION
  OTHER
}

// FHIR/HL7 Interoperability Models
model FHIRResource {
  id                String   @id @default(cuid())
  resourceType      String   // Patient, Observation, Medication, etc.
  resourceId        String   // FHIR resource ID
  versionId         String?  // FHIR version ID for versioning
  lastUpdated       DateTime @default(now())
  data              Json     // Complete FHIR resource JSON
  patientId         String?  // Link to internal patient if applicable
  status            FHIRResourceStatus @default(ACTIVE)
  source            String?  // Source system (OpenMRS, external EHR, etc.)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  patient           Patient? @relation(fields: [patientId], references: [id])

  @@map("fhir_resources")

  // Indexes
  @@index([resourceType])
  @@index([resourceId])
  @@index([patientId])
  @@index([lastUpdated])
  @@index([status])
}

model HL7Message {
  id                String   @id @default(cuid())
  messageType       String   // ADT, ORU, ORM, etc.
  messageId         String   @unique // MSH-10 Message Control ID
  version           String   @default("2.5") // HL7 version
  rawMessage        String   // Complete HL7 message
  parsedData        Json?    // Parsed message data
  status            HL7MessageStatus @default(RECEIVED)
  direction         HL7Direction // INBOUND or OUTBOUND
  sourceSystem      String?  // Source/destination system
  patientId         String?  // Linked patient ID
  processingErrors  String[] // Any parsing/validation errors
  processedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  patient           Patient? @relation(fields: [patientId], references: [id])

  @@map("hl7_messages")

  // Indexes
  @@index([messageType])
  @@index([messageId])
  @@index([status])
  @@index([direction])
  @@index([patientId])
  @@index([createdAt])
}

model ExternalSystem {
  id                String   @id @default(cuid())
  name              String   @unique
  type              ExternalSystemType // FHIR_SERVER, HL7_ENDPOINT, DICOM_PACS, etc.
  baseUrl           String
  apiKey            String?  // Encrypted
  username          String?
  password          String?  // Encrypted
  authType          AuthType @default(BASIC)
  isActive          Boolean  @default(true)
  lastSync          DateTime?
  syncStatus        SyncStatus @default(IDLE)
  errorMessage      String?
  configuration     Json?    // Additional system-specific config
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("external_systems")

  // Indexes
  @@index([type])
  @@index([isActive])
  @@index([lastSync])
}

model FHIRMapping {
  id                String   @id @default(cuid())
  internalResource  String   // Internal model name (Patient, MedicalRecord, etc.)
  internalField     String   // Internal field path
  fhirResource      String   // FHIR resource type
  fhirPath          String   // FHIR field path
  mappingType       MappingType // DIRECT, TRANSFORM, LOOKUP
  transformFunction String?  // Function name for complex transformations
  isRequired        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("fhir_mappings")

  // Indexes
  @@index([internalResource])
  @@index([fhirResource])
}

// DICOM/PACS Models
model DICOMStudy {
  id                String   @id @default(cuid())
  studyInstanceUID  String   @unique
  patientId         String
  accessionNumber   String?  @unique
  studyDescription  String?
  studyDate         DateTime?
  modality          RadiologyModality?
  bodyPart          String?
  referringPhysician String?
  performingPhysician String?
  institutionName   String?
  status            DICOMStatus @default(RECEIVED)
  storagePath       String?  // Path to stored DICOM files
  metadata          Json?    // DICOM metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  patient           Patient  @relation(fields: [patientId], references: [id])
  series            DICOMSeries[]

  @@map("dicom_studies")

  // Indexes
  @@index([studyInstanceUID])
  @@index([patientId])
  @@index([accessionNumber])
  @@index([studyDate])
  @@index([modality])
  @@index([status])
}

model DICOMSeries {
  id                String   @id @default(cuid())
  seriesInstanceUID String   @unique
  studyId           String
  seriesNumber      String?
  seriesDescription String?
  modality          RadiologyModality?
  bodyPart          String?
  seriesDate        DateTime?
  status            DICOMStatus @default(RECEIVED)
  storagePath       String?  // Path to stored DICOM files
  metadata          Json?    // DICOM metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  study             DICOMStudy @relation(fields: [studyId], references: [id])
  instances         DICOMInstance[]

  @@map("dicom_series")

  // Indexes
  @@index([seriesInstanceUID])
  @@index([studyId])
  @@index([modality])
  @@index([status])
}

model DICOMInstance {
  id                String   @id @default(cuid())
  sopInstanceUID    String   @unique
  seriesId          String
  instanceNumber    String?
  sopClassUID       String?
  storagePath       String   // Path to DICOM file
  fileSize          Int?     // File size in bytes
  metadata          Json?    // DICOM instance metadata
  status            DICOMStatus @default(RECEIVED)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  series            DICOMSeries @relation(fields: [seriesId], references: [id])

  @@map("dicom_instances")

  // Indexes
  @@index([sopInstanceUID])
  @@index([seriesId])
  @@index([status])
}

model PACSIntegration {
  id                String   @id @default(cuid())
  systemName        String   @unique
  baseUrl           String
  aetitle           String   // DICOM AE Title
  port              Int      @default(4242)
  apiKey            String?  // Encrypted
  isActive          Boolean  @default(true)
  lastSync          DateTime?
  syncStatus        SyncStatus @default(IDLE)
  errorMessage      String?
  configuration     Json?    // PACS-specific configuration
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("pacs_integrations")

  // Indexes
  @@index([systemName])
  @@index([isActive])
  @@index([lastSync])
}

// Drug Interaction Models
model DrugInteraction {
  id                String   @id @default(cuid())
  drug1Id           String   // Reference to medication
  drug2Id           String   // Reference to medication
  interactionType   InteractionType
  severity          InteractionSeverity
  description       String
  clinicalEffects   String?
  management        String?
  source            String   // Source of interaction data
  lastUpdated       DateTime @default(now())
  createdAt         DateTime @default(now())

  // Relations
  drug1             Medication @relation(name: "drug1", fields: [drug1Id], references: [id])
  drug2             Medication @relation(name: "drug2", fields: [drug2Id], references: [id])

  @@unique([drug1Id, drug2Id])
  @@map("drug_interactions")

  // Indexes
  @@index([drug1Id])
  @@index([drug2Id])
  @@index([interactionType])
  @@index([severity])
}

model DrugDatabase {
  id                String   @id @default(cuid())
  name              String   @unique
  provider          String   // e.g., "Drugs.com", "RxNorm", "FDA"
  baseUrl           String
  apiKey            String?  // Encrypted
  isActive          Boolean  @default(true)
  lastSync          DateTime?
  syncStatus        SyncStatus @default(IDLE)
  configuration     Json?    // Database-specific configuration
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("drug_databases")

  // Indexes
  @@index([provider])
  @@index([isActive])
  @@index([lastSync])
}

model InteractionCheck {
  id                String   @id @default(cuid())
  prescriptionId    String
  patientId         String
  medications       String[] // List of medication IDs checked
  interactions      Json     // Interaction results
  checkedBy         String   // User who performed the check
  checkedAt         DateTime @default(now())
  status            CheckStatus @default(PASSED)
  warnings          String[] // Warning messages
  criticalAlerts    String[] // Critical interaction alerts

  // Relations
  prescription      Prescription? @relation(fields: [prescriptionId], references: [id])
  patient           Patient       @relation(fields: [patientId], references: [id])

  @@map("interaction_checks")

  // Indexes
  @@index([prescriptionId])
  @@index([patientId])
  @@index([checkedAt])
  @@index([status])
}

// Enums for new models
enum FHIRResourceStatus {
  ACTIVE
  DELETED
  SUPERSEDED
}

enum HL7MessageStatus {
  RECEIVED
  PROCESSED
  FAILED
  RETRIED
}

enum HL7Direction {
  INBOUND
  OUTBOUND
}

enum ExternalSystemType {
  FHIR_SERVER
  HL7_ENDPOINT
  DICOM_PACS
  DRUG_DATABASE
  EHR_SYSTEM
}

enum AuthType {
  BASIC
  BEARER
  API_KEY
  OAUTH2
}

enum MappingType {
  DIRECT
  TRANSFORM
  LOOKUP
}

enum DICOMStatus {
  RECEIVED
  PROCESSING
  STORED
  FAILED
  DELETED
}

enum InteractionType {
  MAJOR
  MODERATE
  MINOR
  UNKNOWN
}

enum InteractionSeverity {
  CONTRAINDICATED
  SEVERE
  MODERATE
  MILD
  UNKNOWN
}

enum CheckStatus {
  PASSED
  WARNINGS
  CRITICAL
  FAILED
}

// Emergency Department Models
model EmergencyVital {
  id                String   @id @default(cuid())
  emergencyVisitId  String
  vitalType         String   // BP, HR, Temp, RR, O2_SAT, etc.
  value             String
  unit              String?  // mmHg, bpm, °C, etc.
  recordedAt        DateTime @default(now())
  recordedBy        String
  createdAt         DateTime @default(now())

  // Relations
  emergencyVisit    EmergencyVisit @relation(fields: [emergencyVisitId], references: [id])

  @@map("emergency_vitals")
  @@index([emergencyVisitId])
  @@index([vitalType])
  @@index([recordedAt])
}

model EmergencyMedication {
  id                String   @id @default(cuid())
  emergencyVisitId  String
  medicationId      String?
  medicationName    String   // If not from inventory
  dosage            String
  route             String   // IV, IM, PO, etc.
  administeredAt    DateTime @default(now())
  administeredBy    String
  notes             String?
  createdAt         DateTime @default(now())

  // Relations
  emergencyVisit    EmergencyVisit @relation(fields: [emergencyVisitId], references: [id])

  @@map("emergency_medications")
  @@index([emergencyVisitId])
  @@index([administeredAt])
}

model EmergencyProcedure {
  id                String   @id @default(cuid())
  emergencyVisitId  String
  procedureName     String
  procedureCode     String?
  performedAt       DateTime @default(now())
  performedBy       String
  outcome           String?
  complications     String?
  notes             String?
  createdAt         DateTime @default(now())

  // Relations
  emergencyVisit    EmergencyVisit @relation(fields: [emergencyVisitId], references: [id])

  @@map("emergency_procedures")
  @@index([emergencyVisitId])
  @@index([performedAt])
}

model EmergencyAlert {
  id                String   @id @default(cuid())
  emergencyVisitId  String
  alertType         String   // CRITICAL_VITALS, ALLERGY, etc.
  severity          String   // HIGH, MEDIUM, LOW
  message           String
  triggeredAt       DateTime @default(now())
  acknowledgedAt    DateTime?
  acknowledgedBy    String?
  resolvedAt        DateTime?
  resolvedBy        String?
  createdAt         DateTime @default(now())

  // Relations
  emergencyVisit    EmergencyVisit @relation(fields: [emergencyVisitId], references: [id])

  @@map("emergency_alerts")
  @@index([emergencyVisitId])
  @@index([alertType])
  @@index([severity])
  @@index([triggeredAt])
}

// IPD (In-Patient Department) Models
model TreatmentPlan {
  id                String   @id @default(cuid())
  admissionId       String   @unique
  primaryDiagnosis  String
  secondaryDiagnoses String[]
  treatmentGoals    String[]
  medications       Json?    // Prescribed medications with schedule
  procedures        Json?    // Planned procedures
  therapies         Json?    // Physical therapy, etc.
  nursingCare       Json?    // Special nursing requirements
  dietaryPlan       String?
  dischargePlan     String?
  estimatedStay     Int?     // Estimated length of stay in days
  icuProgressNotes  Json?    // Daily ICU progress notes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  admission         IPDAdmission @relation(fields: [admissionId], references: [id])

  @@map("treatment_plans")
  @@index([admissionId])
}

// IPD Admission Model
model IPDAdmission {
  id                String   @id @default(cuid())
  tenantId          String   // Multi-tenancy
  admissionNumber   String   @unique
  patientId         String
  doctorId          String
  bedAssignment     String?
  admissionDate     DateTime @default(now())
  dischargeDate     DateTime?
  admissionType     String   // EMERGENCY, ELECTIVE, TRANSFER
  admissionReason   String
  currentStatus     String   @default("ADMITTED") // ADMITTED, DISCHARGED, TRANSFERRED
  isArchived        Boolean  @default(false)
  archivedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  patient           Patient  @relation(fields: [patientId], references: [id])
  treatmentPlan     TreatmentPlan?

  @@map("ipd_admissions")
  @@index([tenantId])
  @@index([patientId])
  @@index([doctorId])
  @@index([admissionDate])
  @@index([currentStatus])
  @@index([isArchived])
}

