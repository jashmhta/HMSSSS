global
    log /dev/log local0
    log /dev/log local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    daemon
    maxconn 4096

    # SSL/TLS settings
    ssl-default-bind-ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options ssl-min-ver TLSv1.2

    # Performance tuning
    tune.ssl.default-dh-param 2048
    tune.bufsize 32768
    tune.maxrewrite 1024

defaults
    log global
    mode http
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.1
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10000ms
    timeout http-keep-alive 10000ms

    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTP
frontend http_front
    bind *:80
    mode http

    # Redirect to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS
frontend https_front
    bind *:443 ssl crt /etc/ssl/certs/hms.local.pem crt /etc/ssl/certs/api.hms.local.pem
    mode http

    # SSL/TLS settings
    ssl-min-ver TLSv1.2

    # HSTS header
    http-response set-header Strict-Transport-Security max-age=31536000;\ includeSubDomains;\ preload

    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"

    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }

    # Routing rules
    acl is_api hdr(host) -i api.hms.local
    acl is_frontend hdr(host) -i hms.local www.hms.local

    use_backend api_backend if is_api
    use_backend frontend_backend if is_frontend

    # Default backend
    default_backend frontend_backend

# API Backend
backend api_backend
    mode http
    balance roundrobin

    # Session persistence for API
    stick-table type string len 50 size 30k expire 30m
    stick store-response res.cook(session_id) if res.cook(session_id)
    stick on req.cook(session_id)

    # Health check
    option httpchk GET /health
    http-check expect status 200

    # Backend servers
    server backend1 backend:3000 check inter 5s rise 2 fall 3 maxconn 100
    server backend2 backend:3000 check inter 5s rise 2 fall 3 maxconn 100 backup
    server backend3 backend:3000 check inter 5s rise 2 fall 3 maxconn 100 backup

    # Circuit breaker
    retries 3
    timeout connect 5s
    timeout server 30s

    # Compression
    compression algo gzip
    compression type text/plain text/html text/xml text/css application/json application/javascript

# Frontend Backend
backend frontend_backend
    mode http
    balance roundrobin

    # Health check
    option httpchk GET /
    http-check expect status 200

    # Backend servers
    server frontend1 frontend:3000 check inter 5s rise 2 fall 3 maxconn 50
    server frontend2 frontend:3000 check inter 5s rise 2 fall 3 maxconn 50 backup

    # Circuit breaker
    retries 3
    timeout connect 5s
    timeout server 30s

    # Compression
    compression algo gzip
    compression type text/plain text/html text/xml text/css application/json application/javascript

# Database Load Balancer (internal)
frontend db_front
    bind *:5432
    mode tcp
    option tcplog

    # Database routing
    use_backend postgres_backend

backend postgres_backend
    mode tcp
    balance roundrobin

    # Health check
    option tcp-check
    tcp-check connect port 5432
    tcp-check expect string isready

    # Backend servers
    server postgres1 postgres:5432 check inter 5s rise 2 fall 3
    server postgres2 postgres:5432 check inter 5s rise 2 fall 3 backup

# Redis Load Balancer (internal)
frontend redis_front
    bind *:6379
    mode tcp
    option tcplog

    # Redis routing
    use_backend redis_backend

backend redis_backend
    mode tcp
    balance roundrobin

    # Health check
    option tcp-check
    tcp-check connect port 6379
    tcp-check send PING\r\n
    tcp-check expect string +PONG

    # Backend servers
    server redis-master redis-master:6379 check inter 5s rise 2 fall 3
    server redis-replica1 redis-replica:6379 check inter 5s rise 2 fall 3
    server redis-replica2 redis-replica:6379 check inter 5s rise 2 fall 3

# Statistics
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE
    stats auth admin:admin123