name: HMS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Testing and Build
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hospital-management-system/backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hms_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run unit tests
      run: npm run test:unit
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hms_test
        REDIS_URL: redis://localhost:6379

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hms_test
        REDIS_URL: redis://localhost:6379

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/

  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hospital-management-system/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run typecheck

    - name: Run unit tests
      run: npm run test:unit

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next/

  # Mobile API Testing
  mobile-api-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./hospital-management-system/test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: hospital-management-system/package.json

    - name: Install dependencies
      run: npm ci

    - name: Run mobile API tests
      run: npm run test:mobile
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hms_test
        REDIS_URL: redis://localhost:6379

    - name: Validate mobile API endpoints
      run: |
        # Test mobile API health
        curl -f http://localhost:3003/health || echo "Mobile API not running in test"

    - name: Upload mobile API test results
      uses: actions/upload-artifact@v4
      with:
        name: mobile-api-test-results
        path: hospital-management-system/test/results/

  # Infrastructure Testing
  infrastructure-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes tools
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'

    - name: Validate Kubernetes manifests
      run: |
        find infrastructure -name "*.yaml" -exec kubectl --dry-run=client apply -f {} \;

    - name: Validate Helm charts
      run: |
        if [ -d "infrastructure/charts" ]; then
          find infrastructure/charts -name "Chart.yaml" -exec helm template test {} \;
        fi

    - name: Check YAML syntax
      run: |
        find . -name "*.yaml" -o -name "*.yml" | xargs -I {} sh -c 'echo "Checking {}"; yamllint {} || true'

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk for dependency scanning
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, mobile-api-test, infrastructure-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./hospital-management-system/backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-backend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./hospital-management-system/frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}-frontend
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Mobile API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./infrastructure/phase3
        file: ./infrastructure/phase3/mobile-api-service.yaml
        push: true
        tags: ${{ steps.meta.outputs.tags }}-mobile-api
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to Staging
      run: |
        # Update image tags in kustomization
        cd infrastructure
        kustomize edit set image \
          hms-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-backend \
          hms-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-frontend \
          hms-mobile-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop-mobile-api

        # Apply changes
        kubectl apply -k .

    - name: Run staging tests
      run: |
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=300s deployment/backend -n staging
        kubectl wait --for=condition=available --timeout=300s deployment/frontend -n staging

        # Run smoke tests
        npm run test:staging

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Deploy to Production
      run: |
        # Update image tags in kustomization
        cd infrastructure
        kustomize edit set image \
          hms-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-backend \
          hms-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-frontend \
          hms-mobile-api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-mobile-api

        # Apply changes
        kubectl apply -k .

    - name: Run production health checks
      run: |
        # Wait for deployment
        kubectl wait --for=condition=available --timeout=600s deployment/backend -n production
        kubectl wait --for=condition=available --timeout=600s deployment/frontend -n production

        # Run health checks
        curl -f https://api.hms.local/health
        curl -f https://app.hms.local/health

    - name: Create GitHub deployment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment'
          });

  # Rollback on Failure
  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Rollback deployment
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

        # Rollback to previous version
        kubectl rollout undo deployment/backend -n production
        kubectl rollout undo deployment/frontend -n production

    - name: Notify on rollback
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: ${{ github.event.deployment.id }},
            state: 'failure',
            description: 'Deployment failed, rolled back to previous version'
          });