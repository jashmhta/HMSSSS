{{- if .Values.mobile.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hms-phase3.fullname" . }}-mobile
  namespace: mobile-system
  labels:
    {{- include "hms-phase3.labels" . | nindent 4 }}
    component: mobile
spec:
  replicas: {{ .Values.mobile.replicaCount }}
  selector:
    matchLabels:
      {{- include "hms-phase3.selectorLabels" . | nindent 6 }}
      component: mobile
  template:
    metadata:
      labels:
        {{- include "hms-phase3.selectorLabels" . | nindent 8 }}
        component: mobile
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3002"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: mobile-api
        image: {{ .Values.mobile.image.repository }}:{{ .Values.mobile.image.tag }}
        imagePullPolicy: {{ .Values.mobile.image.pullPolicy }}
        ports:
        - containerPort: 3002
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3002"
        - name: DATABASE_HOST
          value: {{ .Values.mobile.config.databaseHost | quote }}
        - name: DATABASE_PORT
          value: {{ .Values.mobile.config.databasePort | quote }}
        - name: DATABASE_NAME
          value: {{ .Values.mobile.config.databaseName | quote }}
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-mobile-secrets
              key: db-username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-mobile-secrets
              key: db-password
        - name: REDIS_URL
          value: {{ .Values.mobile.config.redisUrl | quote }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-mobile-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-mobile-secrets
              key: jwt-secret
        - name: GRAPHQL_URL
          value: {{ .Values.mobile.config.graphqlUrl | quote }}
        - name: ANALYTICS_URL
          value: {{ .Values.mobile.config.analyticsUrl | quote }}
        workingDir: /app
        command:
        - /bin/sh
        - -c
        - |
          cd /app
          npm install
          npm start
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          {{- toYaml .Values.mobile.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3002
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: app-code
        emptyDir: {}
      initContainers:
      - name: init-mobile-code
        image: {{ .Values.mobile.image.repository }}:{{ .Values.mobile.image.tag }}
        command:
        - /bin/sh
        - -c
        - |
          mkdir -p /app
          cd /app
          cat > package.json << 'EOF'
          {
            "name": "hms-mobile-api",
            "version": "1.0.0",
            "description": "Mobile API Service for Ultimate HMS",
            "main": "index.js",
            "scripts": {
              "start": "node index.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "pg": "^8.11.0",
              "redis": "^4.6.0",
              "jsonwebtoken": "^9.0.0",
              "bcryptjs": "^2.4.3",
              "axios": "^1.4.0",
              "express-rate-limit": "^6.7.0",
              "helmet": "^6.0.1",
              "cors": "^2.8.5"
            }
          }
          EOF

          cat > index.js << 'EOF'
          const express = require('express');
          const { Pool } = require('pg');
          const { createClient } = require('redis');
          const jwt = require('jsonwebtoken');
          const bcrypt = require('bcryptjs');
          const axios = require('axios');
          const rateLimit = require('express-rate-limit');
          const helmet = require('helmet');
          const cors = require('cors');

          const app = express();
          app.use(helmet());
          app.use(cors());
          app.use(express.json());

          // Rate limiting
          const limiter = rateLimit({
            windowMs: 15 * 60 * 1000,
            max: 100
          });
          app.use('/api/', limiter);

          // Database connections
          const pool = new Pool({
            host: process.env.DATABASE_HOST,
            port: process.env.DATABASE_PORT,
            database: process.env.DATABASE_NAME,
            user: process.env.DATABASE_USERNAME,
            password: process.env.DATABASE_PASSWORD,
            max: 20
          });

          const redis = createClient({
            url: process.env.REDIS_URL,
            password: process.env.REDIS_PASSWORD
          });

          // Authentication middleware
          const authenticateToken = (req, res, next) => {
            const authHeader = req.headers['authorization'];
            const token = authHeader && authHeader.split(' ')[1];

            if (!token) return res.sendStatus(401);

            jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
              if (err) return res.sendStatus(403);
              req.user = user;
              next();
            });
          };

          // Health checks
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy', service: 'mobile-api' });
          });

          app.get('/ready', (req, res) => {
            res.json({ status: 'ready', service: 'mobile-api' });
          });

          // Patient Authentication
          app.post('/api/v1/auth/patient/login', async (req, res) => {
            try {
              const { email, password } = req.body;
              const { schema } = getTenantContext(req);

              const client = await pool.connect();
              try {
                await client.query(`SET search_path TO ${schema}`);

                const result = await client.query(
                  'SELECT id, email, first_name, last_name FROM patients WHERE email = $1',
                  [email]
                );

                if (result.rows.length === 0) {
                  return res.status(401).json({ error: 'Invalid credentials' });
                }

                const user = result.rows[0];
                const token = jwt.sign(
                  { id: user.id, email: user.email, role: 'patient', tenantId: req.headers['x-tenant-id'] },
                  process.env.JWT_SECRET,
                  { expiresIn: '24h' }
                );

                res.json({
                  token,
                  user: {
                    id: user.id,
                    name: `${user.first_name} ${user.last_name}`,
                    email: user.email
                  }
                });
              } finally {
                client.release();
              }
            } catch (error) {
              console.error('Patient login error:', error);
              res.status(500).json({ error: 'Login failed' });
            }
          });

          // Patient APIs
          app.get('/api/v1/patient/appointments', authenticateToken, async (req, res) => {
            try {
              if (req.user.role !== 'patient') return res.sendStatus(403);

              const { schema } = getTenantContext(req);
              const client = await pool.connect();

              try {
                await client.query(`SET search_path TO ${schema}`);

                const result = await client.query(`
                  SELECT a.*, p.first_name, p.last_name
                  FROM appointments a
                  JOIN patients p ON a.patient_id = p.id
                  WHERE a.patient_id = $1
                  ORDER BY a.appointment_date DESC
                  LIMIT 10
                `, [req.user.id]);

                res.json(result.rows.map(apt => ({
                  id: apt.id,
                  date: apt.appointment_date,
                  duration: apt.duration,
                  status: apt.status,
                  type: apt.type,
                  provider: `${apt.first_name} ${apt.last_name}`,
                  notes: apt.notes
                })));
              } finally {
                client.release();
              }
            } catch (error) {
              console.error('Get appointments error:', error);
              res.status(500).json({ error: 'Failed to fetch appointments' });
            }
          });

          const PORT = process.env.PORT || 3002;
          app.listen(PORT, () => {
            console.log(`ðŸš€ Mobile API service running on port ${PORT}`);
          });
          EOF
        volumeMounts:
        - name: app-code
          mountPath: /app
{{- end }}