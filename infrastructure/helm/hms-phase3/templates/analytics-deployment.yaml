{{- if .Values.analytics.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hms-phase3.fullname" . }}-analytics
  namespace: analytics-system
  labels:
    {{- include "hms-phase3.labels" . | nindent 4 }}
    component: analytics
spec:
  replicas: {{ .Values.analytics.replicaCount }}
  selector:
    matchLabels:
      {{- include "hms-phase3.selectorLabels" . | nindent 6 }}
      component: analytics
  template:
    metadata:
      labels:
        {{- include "hms-phase3.selectorLabels" . | nindent 8 }}
        component: analytics
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: analytics
        image: {{ .Values.analytics.image.repository }}:{{ .Values.analytics.image.tag }}
        imagePullPolicy: {{ .Values.analytics.image.pullPolicy }}
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: ELASTICSEARCH_URL
          value: {{ .Values.analytics.config.elasticsearchUrl | quote }}
        - name: DATABASE_HOST
          value: {{ .Values.analytics.config.databaseHost | quote }}
        - name: DATABASE_PORT
          value: {{ .Values.analytics.config.databasePort | quote }}
        - name: DATABASE_NAME
          value: {{ .Values.analytics.config.databaseName | quote }}
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-analytics-secrets
              key: db-username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-analytics-secrets
              key: db-password
        - name: REDIS_URL
          value: {{ .Values.analytics.config.redisUrl | quote }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "hms-phase3.fullname" . }}-analytics-secrets
              key: redis-password
        - name: PROMETHEUS_URL
          value: {{ .Values.analytics.config.prometheusUrl | quote }}
        workingDir: /app
        command:
        - /bin/sh
        - -c
        - |
          cd /app
          npm install
          npm start
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          {{- toYaml .Values.analytics.resources | nindent 10 }}
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: app-code
        emptyDir: {}
      initContainers:
      - name: init-code
        image: {{ .Values.analytics.image.repository }}:{{ .Values.analytics.image.tag }}
        command:
        - /bin/sh
        - -c
        - |
          mkdir -p /app
          cd /app
          cat > package.json << 'EOF'
          {
            "name": "hms-analytics-service",
            "version": "1.0.0",
            "description": "Advanced Analytics Service for Ultimate HMS",
            "main": "index.js",
            "scripts": {
              "start": "node index.js"
            },
            "dependencies": {
              "express": "^4.18.2",
              "pg": "^8.11.0",
              "redis": "^4.6.0",
              "@elastic/elasticsearch": "^8.9.0",
              "prometheus-api-metrics": "^3.2.2",
              "node-cron": "^3.0.2",
              "axios": "^1.4.0"
            }
          }
          EOF

          cat > index.js << 'EOF'
          const express = require('express');
          const { Pool } = require('pg');
          const { createClient } = require('redis');
          const { Client } = require('@elastic/elasticsearch');
          const cron = require('node-cron');
          const axios = require('axios');

          const app = express();
          app.use(express.json());

          // Database connections
          const pool = new Pool({
            host: process.env.DATABASE_HOST,
            port: process.env.DATABASE_PORT,
            database: process.env.DATABASE_NAME,
            user: process.env.DATABASE_USERNAME,
            password: process.env.DATABASE_PASSWORD,
            max: 20
          });

          const redis = createClient({
            url: process.env.REDIS_URL,
            password: process.env.REDIS_PASSWORD
          });

          const elasticsearch = new Client({
            node: process.env.ELASTICSEARCH_URL
          });

          // Health checks
          app.get('/health', (req, res) => {
            res.json({ status: 'healthy', service: 'analytics' });
          });

          app.get('/ready', (req, res) => {
            res.json({ status: 'ready', service: 'analytics' });
          });

          // Analytics endpoints
          app.get('/api/v1/analytics/patient-stats', async (req, res) => {
            try {
              const tenantId = req.headers['x-tenant-id'] || 'default';
              const schema = tenantId === 'default' ? 'public' : `tenant_${tenantId.replace('-', '_')}`;

              const client = await pool.connect();
              try {
                await client.query(`SET search_path TO ${schema}`);

                const result = await client.query(`
                  SELECT
                    COUNT(*) as total_patients,
                    COUNT(CASE WHEN date_of_birth > CURRENT_DATE - INTERVAL '18 years' THEN 1 END) as pediatric_patients,
                    COUNT(CASE WHEN date_of_birth <= CURRENT_DATE - INTERVAL '65 years' THEN 1 END) as geriatric_patients,
                    ROUND(AVG(EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM date_of_birth)), 1) as avg_age
                  FROM patients
                `);

                res.json(result.rows[0]);
              } finally {
                client.release();
              }
            } catch (error) {
              console.error('Error fetching patient stats:', error);
              res.status(500).json({ error: 'Failed to fetch patient statistics' });
            }
          });

          const PORT = process.env.PORT || 3001;
          app.listen(PORT, () => {
            console.log(`ðŸš€ Analytics service running on port ${PORT}`);
          });
          EOF
        volumeMounts:
        - name: app-code
          mountPath: /app
{{- end }}