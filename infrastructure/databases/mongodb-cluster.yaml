---
# Ultimate HMS - MongoDB Replica Set Configuration
# This configuration sets up a MongoDB replica set for document storage

apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
data:
  mongodb.conf: |
    # MongoDB configuration for HMS
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1
          journalCompressor: snappy
        collectionConfig:
          blockCompressor: snappy
        indexConfig:
          prefixCompression: true

    systemLog:
      destination: file
      logAppend: true
      path: /var/log/mongodb/mongod.log
      logRotate: reopen
      timeStampFormat: iso8601-utc

    net:
      port: 27017
      bindIp: 0.0.0.0
      maxIncomingConnections: 1000

    replication:
      replSetName: hmsReplicaSet
      enableMajorityReadConcern: true

    security:
      authorization: disabled

    processManagement:
      fork: false
      pidFilePath: /var/run/mongodb/mongod.pid

---
# MongoDB KeyFile Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-keyfile
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
type: Opaque
data:
  keyfile: bW9uZ29fa2V5ZmlsZV9jb250ZW50X2hlcmU=  # base64 encoded keyfile content

---
# MongoDB StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
    system: mongodb
spec:
  serviceName: mongodb-hms
  replicas: 3
  selector:
    matchLabels:
      app: hospital-management-system
      component: database
      system: mongodb
  template:
    metadata:
      labels:
        app: hospital-management-system
        component: database
        system: mongodb
    spec:
      serviceAccountName: hms-admin
      priorityClassName: hms-critical
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: mongodb
        image: mongo:6.0
        ports:
        - containerPort: 27017
          name: mongodb
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "hms_admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: root-password
        - name: MONGO_INITDB_DATABASE
          value: "hms_documents"
        command:
        - mongod
        - --replSet
        - hmsReplicaSet
        - --bind_ip_all
        volumeMounts:
        - name: mongodb-data
          mountPath: /data/db

        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - mongosh
            - --eval
            - "db.adminCommand('ping')"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: mongodb-config
        configMap:
          name: mongodb-config
          items:
          - key: mongodb.conf
            path: mongodb.conf
  volumeClaimTemplates:
  - metadata:
      name: mongodb-data
      labels:
        app: hospital-management-system
        component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 100Gi
      storageClassName: standard

---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-hms
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
    system: mongodb
spec:
  selector:
    app: hospital-management-system
    component: database
    system: mongodb
  ports:
  - name: mongodb
    port: 27017
    targetPort: 27017
  clusterIP: None

---
# MongoDB Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
type: Opaque
data:
  root-password: bW9uZ29fcm9vdF9wYXNzd29yZA==  # base64 encoded: mongo_root_password
  user-password: bW9uZ29fdXNlcl9wYXNzd29yZA==  # base64 encoded: mongo_user_password

---
# MongoDB Init Job
apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
spec:
  template:
    spec:
      serviceAccountName: hms-admin
      restartPolicy: OnFailure
      containers:
      - name: mongodb-init
        image: mongo:6.0
        command:
        - mongo
        - --host
        - mongodb-hms-0.mongodb-hms.ultimate-hms.svc.cluster.local
        - --eval
        - |
          rs.initiate({
            _id: "hmsReplicaSet",
            members: [
              {_id: 0, host: "mongodb-hms-0.mongodb-hms.ultimate-hms.svc.cluster.local:27017"},
              {_id: 1, host: "mongodb-hms-1.mongodb-hms.ultimate-hms.svc.cluster.local:27017"},
              {_id: 2, host: "mongodb-hms-2.mongodb-hms.ultimate-hms.svc.cluster.local:27017"}
            ]
          });

          db.getSiblingDB("admin").createUser({
            user: "hms_user",
            pwd: "hms_user_password",
            roles: [
              {role: "readWrite", db: "hms_documents"},
              {role: "readWrite", db: "hms_attachments"},
              {role: "readWrite", db: "hms_audit"}
            ]
          });
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "hms_admin"
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: root-password

---
# MongoDB Backup CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: mongodb-backup
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: hms-admin
          containers:
          - name: mongodb-backup
            image: mongo:6.0
            command:
            - /bin/sh
            - -c
            - |
              mongodump --host mongodb-hms \
                       --username hms_user \
                       --password hms_user_password \
                       --db hms_documents \
                       --out /backup/mongodb_backup_$(date +%Y%m%d_%H%M%S)
            env:
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: user-password
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: mongodb-backup-pvc
          restartPolicy: OnFailure

---
# MongoDB Backup PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-backup-pvc
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Gi
  storageClassName: standard

---
# MongoDB Exporter for Prometheus
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-exporter
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: hospital-management-system
      component: monitoring
      system: mongodb-exporter
  template:
    metadata:
      labels:
        app: hospital-management-system
        component: monitoring
        system: mongodb-exporter
    spec:
      serviceAccountName: hms-admin
      containers:
      - name: mongodb-exporter
        image: percona/mongodb_exporter:0.39
        ports:
        - containerPort: 9216
          name: metrics
        env:
        - name: MONGODB_URI
          value: "mongodb://hms_user:hms_user_password@mongodb-hms:27017/hms_documents?replicaSet=hmsReplicaSet"
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
# MongoDB Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb-exporter
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: monitoring
spec:
  selector:
    app: hospital-management-system
    component: monitoring
    system: mongodb-exporter
  ports:
  - name: metrics
    port: 9216
    targetPort: 9216
  type: ClusterIP

---
# MongoDB ServiceMonitor (for Prometheus)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mongodb-servicemonitor
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: monitoring
spec:
  selector:
    matchLabels:
      app: hospital-management-system
      component: monitoring
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s