---
# Security Database Initialization
apiVersion: batch/v1
kind: Job
metadata:
  name: security-db-init
  namespace: ultimate-hms
  labels:
    app: hospital-management-system
    component: security
    system: db-init
spec:
  template:
    spec:
      serviceAccountName: hms-admin
      restartPolicy: OnFailure
      containers:
      - name: security-db-init
        image: postgres:15
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "üîê Initializing security database schemas..."

          # Wait for PostgreSQL to be ready
          until pg_isready -h postgresql-hms.ultimate-hms.svc.cluster.local -p 5432 -U hms_user; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 2
          done

          echo "‚úÖ PostgreSQL is ready"

          PGPASSWORD=hms_user_password psql -h postgresql-hms.ultimate-hms.svc.cluster.local -p 5432 -U hms_user -d hms_db -c "
            -- Create security-related tables

            -- Users table for authentication
            CREATE TABLE IF NOT EXISTS users (
              id SERIAL PRIMARY KEY,
              tenant_id VARCHAR(50) DEFAULT 'default',
              email VARCHAR(255) UNIQUE NOT NULL,
              password_hash VARCHAR(255),
              first_name VARCHAR(100),
              last_name VARCHAR(100),
              role VARCHAR(50) DEFAULT 'patient',
              is_active BOOLEAN DEFAULT true,
              last_login TIMESTAMP,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- Audit logs table
            CREATE TABLE IF NOT EXISTS audit_logs (
              id SERIAL PRIMARY KEY,
              timestamp TIMESTAMP NOT NULL,
              method VARCHAR(10),
              url TEXT,
              user_agent TEXT,
              ip_address INET,
              user_id VARCHAR(100),
              tenant_id VARCHAR(50) DEFAULT 'default',
              status_code INTEGER,
              response_time INTEGER,
              user_role VARCHAR(50),
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- Casbin rules table for RBAC
            CREATE TABLE IF NOT EXISTS casbin_rules (
              id SERIAL PRIMARY KEY,
              ptype VARCHAR(100),
              v0 VARCHAR(100),
              v1 VARCHAR(100),
              v2 VARCHAR(100),
              v3 VARCHAR(100),
              v4 VARCHAR(100),
              v5 VARCHAR(100)
            );

            -- Sessions table
            CREATE TABLE IF NOT EXISTS sessions (
              id SERIAL PRIMARY KEY,
              session_id VARCHAR(255) UNIQUE NOT NULL,
              user_id INTEGER REFERENCES users(id),
              tenant_id VARCHAR(50) DEFAULT 'default',
              data JSONB,
              expires_at TIMESTAMP NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- Security events table
            CREATE TABLE IF NOT EXISTS security_events (
              id SERIAL PRIMARY KEY,
              event_type VARCHAR(100) NOT NULL,
              severity VARCHAR(20) DEFAULT 'info',
              message TEXT,
              user_id VARCHAR(100),
              tenant_id VARCHAR(50) DEFAULT 'default',
              ip_address INET,
              user_agent TEXT,
              metadata JSONB,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );

            -- Create indexes for performance
            CREATE INDEX IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs(timestamp);
            CREATE INDEX IF NOT EXISTS idx_audit_logs_tenant ON audit_logs(tenant_id);
            CREATE INDEX IF NOT EXISTS idx_audit_logs_user ON audit_logs(user_id);
            CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
            CREATE INDEX IF NOT EXISTS idx_users_tenant ON users(tenant_id);
            CREATE INDEX IF NOT EXISTS idx_sessions_expires ON sessions(expires_at);
            CREATE INDEX IF NOT EXISTS idx_security_events_type ON security_events(event_type);
            CREATE INDEX IF NOT EXISTS idx_security_events_tenant ON security_events(tenant_id);

            -- Insert sample users for testing
            INSERT INTO users (email, password_hash, first_name, last_name, role, tenant_id) VALUES
            ('admin@hms.local', '$2b$10$dummy.hash.for.demo', 'System', 'Administrator', 'admin', 'default'),
            ('doctor@hospital-a.hms.local', '$2b$10$dummy.hash.for.demo', 'Dr. John', 'Smith', 'doctor', 'hospital-a'),
            ('patient@hospital-a.hms.local', '$2b$10$dummy.hash.for.demo', 'Jane', 'Doe', 'patient', 'hospital-a')
            ON CONFLICT (email) DO NOTHING;
          "

          echo "üéâ Security database initialization completed successfully"