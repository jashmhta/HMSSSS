---
# GraphQL API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql-api
  namespace: graphql-system
  labels:
    app: hospital-management-system
    component: api
    system: graphql
    service: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: hospital-management-system
      component: api
      system: graphql
      service: api
  template:
    metadata:
      labels:
        app: hospital-management-system
        component: api
        system: graphql
        service: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/graphql"
    spec:
      serviceAccountName: hms-admin
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
       - name: init-code
         image: busybox
         command:
         - /bin/sh
         - -c
         - |
           mkdir -p /app
           cp /code/package-json /app/package.json
           cp /code/index-js /app/index.js
         volumeMounts:
         - name: graphql-code
           mountPath: /code
           readOnly: true
         - name: app-code
           mountPath: /app
      containers:
      - name: graphql-api
        image: node:18-alpine
        ports:
        - containerPort: 4000
          name: graphql
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "4000"
        - name: OPENMRS_API_URL
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: OPENMRS_API_URL
        - name: METASFRESH_API_URL
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: METASFRESH_API_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: REDIS_URL
        - name: ELASTICSEARCH_URL
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: ELASTICSEARCH_URL
        - name: OPENMRS_USERNAME
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
              key: openmrs-username
        - name: OPENMRS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
              key: openmrs-password
        - name: METASFRESH_USERNAME
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
              key: metasfresh-username
        - name: METASFRESH_PASSWORD
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
              key: metasfresh-password
        - name: JWT_SECRET
          valueFrom:
             secretKeyRef:
               name: graphql-secrets
               key: jwt-secret
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
              key: redis-password
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: graphql-config
               key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: graphql-config
              key: DATABASE_NAME
        - name: DATABASE_USERNAME
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
              key: db-username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: graphql-secrets
               key: db-password
        workingDir: /app
        command:
        - /bin/sh
        - -c
        - |
          cd /app
          npm install
          npm start
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /graphql
            port: 4000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          tcpSocket:
            port: 4000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: graphql-code
        configMap:
          name: graphql-simple-code
          defaultMode: 493
      - name: app-code
        emptyDir: {}

---
# GraphQL API Service
apiVersion: v1
kind: Service
metadata:
  name: graphql-api
  namespace: graphql-system
  labels:
    app: hospital-management-system
    component: api
    system: graphql
    service: api
spec:
  type: ClusterIP
  ports:
  - name: graphql
    port: 80
    targetPort: 4000
  selector:
    app: hospital-management-system
    component: api
    system: graphql
    service: api

---
# GraphQL Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graphql-ingress
  namespace: graphql-system
  labels:
    app: hospital-management-system
    component: api
    system: graphql
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - api.hms.local
    secretName: graphql-tls
  rules:
  - host: api.hms.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: graphql-api
            port:
              number: 80

---
# GraphQL HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: graphql-api-hpa
  namespace: graphql-system
  labels:
    app: hospital-management-system
    component: api
    system: graphql
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: graphql-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# GraphQL PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: graphql-api-pdb
  namespace: graphql-system
  labels:
    app: hospital-management-system
    component: api
    system: graphql
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: hospital-management-system
      component: api
      system: graphql
      service: api